#!/bin/bash

SCRIPT_FILE_NAME=$(basename $0)
SCRIPT_NAME=${SCRIPT_FILE_NAME%.*}
SELF=$(cd $(dirname $0); pwd)

VERSION="0.8.0"

VERSION="1.1.5"

LOGGING=false
SEPARATER='---------------------------'

function _usage() {
    echo "Usage: ${SCRIPT_NAME} [OPTIONS] [SEED_FILE]"
    echo "  This script is ~."
    echo
    echo "Options:"
    echo "  -h, --help                     Show help."
    echo "  -v, --version                  Show script version."
    echo "  -e, --extension val            Limit the output file to the extension of siblings."
    echo "  -d, --delimiter val            Delimiter at output."
    echo "      --dotfile                  Also outputs a dot file."
    echo "  -a                             Output with absolute path."
    echo "  -c                             Show the number of files."

    echo "      --verbose                  Print various logging information"
    echo "  -o, --output val               List file in the specified file."
    echo
    exit 0
}

function _log() {
    ${LOGGING} && echo "$@" || return 0
}

function _err() {
    echo "[err] $1" && exit 1
}

function _args_count() {
    echo ${#ARG_VALUES[@]}
}

function _is_exist() {
    [ -f $1 ] || [ -d $1 ] || [[ $(type $1) ]]
}

function _verbose() {
    _log "DIR: ${DIR}"
    _log "EXT: ${EXT[@]}"
    _log "IS_ABSOLUTE_PATH: ${IS_ABSOLUTE_PATH}"
    _log "IS_SHOW_DOT_FILE: ${IS_SHOW_DOT_FILE}"
    _log "DELIMITER: ${DELIMITER}"
    _log "IS_COUNT: ${IS_COUNT}"
    _log "${SEPARATER}"
}

DIR=''
EXT=()
IS_ABSOLUTE_PATH=false
IS_SHOW_DOT_FILE=false

IS_OUTPUT_FILE=false
OUTPUT=""

DELIMITER='\n'
IS_COUNT=false


function _main() {

    while read -r file; do

        local is_print_ok=true
        local is_dot_file=false

        file=$(echo ${file} | sed 's:^\./::')
        


        if [ ${file:0:1} == '.' ]; then

        #local filename=$(echo ${file} | rev | cut -d '/' -f 1 | rev)
        local filename=$(basename ${file})
        if [ ${filename:0:1} == '.' ]; then

            ${IS_SHOW_DOT_FILE} || {
                continue
            }
        fi

        [ ! -z ${EXT} ] && {
            is_print_ok=false
            for e in ${EXT[@]}; do
                if [ "${e}" = "${file##*.}" ]; then
                   is_print_ok=true
                   break
                fi
            done

            if [[ -n $OUTPUT ]]; then
                is_print_ok=true
            fi
        }

        ${is_print_ok} &&  {
            ${IS_ABSOLUTE_PATH} && {
                ${IS_OUTPUT_FILE} && {
                    echo "${SELF}/${file}" >>$OUTPUT
                } || {
                        echo "${SELF}/${file}" 
                    }
            } || { 
                ${IS_OUTPUT_FILE} && {
                echo "${file}" >>$OUTPUT
                } || {
                    echo "${file}"
                    }
            }

    } 
    done < <(find ${DIR} -type f -mindepth 1 -maxdepth 1) 
    if [[ -s $OUTPUT ]];then
        sed -i "/$OUTPUT/d" $OUTPUT
    fi

        }
    done < <(find "${DIR}" -type f -mindepth 1 -maxdepth 1)

    ${IS_COUNT} && echo ${#results[@]} && exit 0

    [ "${DELIMITER}" = '\n' ] && {
        (IFS=$'\n'; echo "${results[*]}")
    } || {
        (IFS="${DELIMITER}"; echo "${results[*]}")
    }

}

# -------------------------------------------------------------
# Arguments and Options
# -------------------------------------------------------------

ARG_VALUES=()

function _analyse_args_and_options() {
    while (( $# > 0 ))
    do
        case $1 in
            -h | --help)
                _usage
                exit 1
                ;;
            -v | --version)
                echo ${SCRIPT_NAME} v${VERSION}
                exit 0
                ;;
            --verbose)
                LOGGING=true
                shift
                ;;
            -e | --extention)                  # Must have argument
                if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                    _err "-e option requires a value."
                fi
                EXT+=($2)
                shift 2
                ;;
            -o | --output)                  
                if [[ -z "$2" ]]; then
                    _err "-o option requires a value."
                else
                    IS_OUTPUT_FILE=true
                    OUTPUT=$2
                    if [[ -s $OUTPUT ]]; then
                        _err "The specified file already exists!"
                    else
                        touch $OUTPUT
                    fi
                fi
                EXT+=($2)
                shift 2
                ;;
            -- | -) # after this all args include '-xx', will treat arg value
                shift
                ARG_VALUES+=( "$@" )
                break
                ;;
            --*) # for true or false flags, no argument
                if [[ "$1" =~ 'dotfile' ]]; then
                    IS_SHOW_DOT_FILE=true
                fi
                shift
                ;;
            -*) # for true or false flags, no argument
                if [[ "$1" =~ 'a' ]]; then
                    IS_ABSOLUTE_PATH=true
                fi
                if [[ "$1" =~ 'c' ]]; then
                    IS_COUNT=true
                fi
                shift
                ;;
            *)
                ARG_VALUES+=("$1")
                shift
                ;;
        esac
    done
}

function _set_variables() {
    DIR=${ARG_VALUES[0]}
}

function _verify_variables() {
    [ -z ${DIR} ] && _err "You need to specify directory."
    [ ! -d ${DIR} ] && _err "No such directory."
    :
}

# -------------------------------------------------------------
# Main Routine
# -------------------------------------------------------------
_analyse_args_and_options $@ && {
    _set_variables && _verify_variables && {
        _verbose
        _log 'start main process..' && _log "${SEPARATER}"
        _main
    }
}
exit 0
